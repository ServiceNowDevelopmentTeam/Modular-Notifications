<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_email">
    <sys_script_email action="INSERT_OR_UPDATE">
        <name>modular_notifications_mailbox_submit</name>
        <new_lines_to_html>false</new_lines_to_html>
        <script><![CDATA[//Do not edit this, change the name then insert and stay to create a new script.
//This is for custom notifications. For out of the box opened, closed, or updated notifications use the modular_notifications_open_close_update_template email script as a starter.

(function runMailScript( /* GlideRecord */ current, /* TemplatePrinter */ template, /* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action, /* Optional GlideRecord */ event) {
    //find RITM since this is called on REQ
    var gr = new GlideRecord('sc_req_item');
    gr.addQuery('request', current.sys_id);
    gr.query();
    gr.next();
    var reopen_sys = gr.sys_id;
	
    //These variables will control the different sections of the modular notifications
    //Subject will also control the email subject, don't include HTML there
    var notification = new ModularNotificationsBuilder();

    //URL that can be universally used for viewing a ticket on the portal
    notification.table = event.table;
    notification.documentID = event.instance;
    notification.setGlobalUrl();
    notification.action = 'opened';

    //kb for how to use/get mailbox
    //var inc_link = notification.globalURL; //TODO <--- incident link or other linke which sends user to some place

    //reopen link
    //var inc_sys_id = '6c9635d61b5774108c5143f3cc4bcbda'; <-reopen one
	var inc_sys_id=      '3f1dd0320a0a0b99000a53f7604a2ef9';
    //make url
    var inc_url = '/sp?id=sc_cat_item&sys_id=' +
        inc_sys_id +
        '&sysparm_variables=%7B%22related_ritm%22:%22' + reopen_sys + '%22%7D';

    var is_team = true;
    if (gr.variables.mailbox_type == 'individual_mailbox')
        is_team = false; //if its an individual one, make it false

    //Email subject and subject section
    //if its an individual mailbox
    if (!is_team)
        notification.subject = 'A Mailbox Access Request has been submitted for your mailbox';
    else //is team
        notification.subject = 'A Mailbox Access Request has been submitted for ' + gr.variables.valid_mailbox.toString();

    //User's first name
    if (!is_team){
		if(gr.variables.targeted_mailbox != '')
			notification.name = gr.variables.targeted_mailbox.toString();
		else
			notification.name = gr.variables.mailbox_owner.name;
		//notification.name = current.opened_by.name.toString(); //'Name';
	}else //is team
        notification.name = gr.variables.targeted_mailbox.toString() + ' Team Members';

    //Information section

    if (!is_team) {
        notification.information = 'This is a courtesy notification that the following request has been submitted for access to your email.  If you have any questions or concerns, please <a href=' + inc_url + '>Click Here</a> to notify Field Support.';
    } else {
        notification.information = 'This is a courtesy notification that the following request has been submitted for access to this shared mailbox.  If you have any questions or concerns, please <a href=' + inc_url + '>Click Here</a> to notify Field Support.';
    }
    //set notification (set above)
    //notification.information =;

    //find permission to access
    var permission = '';
    if (gr.variables.full_access_view_and_manage_all_mail == 'true')
        permission += 'Full Access (to view and manage all mail), ';
    if (gr.variables.send_as == 'true')
        permission += 'Send As, ';
    if (gr.variables.send_on_behalf_of)
        permission += 'Send on Behalf of';
    if (permission == '') //if its still empty
        permission = 'no permission/disable permission';

    //find the end date string
    var end_date_string = '';
    if (gr.variables.no_end_date == 'true')
        end_date_string = 'no end date';
    else
        end_date_string = gr.variables.end_date.toString();

    //variables section
	if(gr.variables.access_type == 'new_access'){
    notification.varList = [{
            variableName: 'Requestor',
            variableValue: gr.requestor.name,
        },
        {
            variableName: 'Requested For',
            variableValue: gr.requested_for.name,
        },
        {
            variableName: 'Approving Manager',
            variableValue: gr.variables.approving_manager.name,
        },
        {
            variableName: 'Access Type',
            variableValue: gr.variables.access_type.getDisplayValue(),
        },
        {
            variableName: 'Mailbox',
            variableValue: gr.variables.valid_mailbox.toString(),
        },
        {
            variableName: 'Permission type',
            variableValue: permission,
        },
        {
            variableName: 'Start Date',
            variableValue: gr.variables.start_date.toString(),
        },
        {
            variableName: 'End Date',
            variableValue: end_date_string,
        },
    ];
	}
	else{//else it is disable access
	notification.varList = [{
            variableName: 'Requestor',
            variableValue: gr.requestor.name,
        },
        {
            variableName: 'Requested For',
            variableValue: gr.requested_for.name,
        },
        {
            variableName: 'Approving Manager',
            variableValue: gr.variables.approving_manager.name,
        },
        {
            variableName: 'Access Type',
            variableValue: gr.variables.access_type.getDisplayValue(),
        },
        {
            variableName: 'Mailbox',
            variableValue: gr.variables.valid_mailbox.toString(),
        },
    ];
	}
    //More information section

    //notification.moreInformation = 'If this request still needs attention, <a href=' + reopen_url + '>Click Here</a> to reopen.';

    //Put it all together to get the full HTML template
    var html = notification.getHTML();

    //Print HTML to the body
    template.print(html);

    //Set email subject
    email.setSubject(notification.subject);

	
	//send it to the valid mailbox
	gs.log('valid mailbox'+ gr.variables.valid_mailbox);
	gs.log('notification name' +notification.name);
	email.addAddress("cc", gr.variables.valid_mailbox, notification.name);

})(current, template, email, email_action, event);]]></script>
        <sys_class_name>sys_script_email</sys_class_name>
        <sys_created_by>John.Schwab</sys_created_by>
        <sys_created_on>2021-10-26 13:45:59</sys_created_on>
        <sys_id>f98e39331b97bc108c5143f3cc4bcb2e</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>modular_notifications_mailbox_submit</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Modular Notifications">9433631b1bcf30508c5143f3cc4bcbfc</sys_scope>
        <sys_update_name>sys_script_email_f98e39331b97bc108c5143f3cc4bcb2e</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-01-19 17:42:45</sys_updated_on>
    </sys_script_email>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Modular Notifications">9433631b1bcf30508c5143f3cc4bcbfc</claim_owner_scope>
        <claim_timestamp>17e736f0f2e0000001</claim_timestamp>
        <metadata_update_name>sys_script_email_f98e39331b97bc108c5143f3cc4bcb2e</metadata_update_name>
        <previous_claim_app_version>1.3.1</previous_claim_app_version>
        <previous_claim_name>Modular Notifications</previous_claim_name>
        <previous_claim_scope>9433631b1bcf30508c5143f3cc4bcbfc</previous_claim_scope>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-01-19 17:42:45</sys_created_on>
        <sys_id>6ad328171b4d011062e50ed2cd4bcbfe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-01-19 17:42:45</sys_updated_on>
    </sys_claim>
</record_update>
